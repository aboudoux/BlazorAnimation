@using Microsoft.Extensions.Options
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
@inject IOptionsSnapshot<AnimationOptions> OptionsSnapshot

<div @ref="DivElementReference" class="@Animate @AnimationType @Class" @attributes="@AdditionalAttributes" style="@($"animation-duration: {Speed.TotalMilliseconds}ms;animation-delay : {Delay.TotalMilliseconds}ms;animation-iteration-count: {IterationCount};"); @Style">
    @ChildContent
</div>

@code {

    protected override void OnParametersSet() => ApplyConfiguration();

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) {
            var dotNetReference = DotNetObjectReference.Create(this);
            JsRuntime.InvokeVoidAsync("AnimatedComponent.animationend", DivElementReference, dotNetReference);
        }
    }

    private ElementReference DivElementReference;

    private string Animate => Enabled ? "animate__animated" : string.Empty;

    private string AnimationType => Enabled ? "animate__" + Effect?.Name : string.Empty;

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public bool Enabled
    {
        get => _enabled ?? true;
        set => _enabled = value;
    }

    [Parameter] public string OptionsName { get; set; } = Options.DefaultName;

    [Parameter] public AnimationEffect Effect { get; set; }

    [Parameter] public TimeSpan Delay {
      get => _delay ?? BlazorAnimation.Delay.None;
      set => _delay = value;
    }

    [Parameter] public TimeSpan Speed
    {
      get => _speed ?? BlazorAnimation.Speed.Slow;
      set => _speed = value;
    }

    [Parameter] public string Class { get; set; } = string.Empty;

    [Parameter] public string Style { get; set; } = string.Empty;

    [Parameter]
    public int IterationCount
    {
        get => _iterationCount is null
                    ? 1
                    : _iterationCount < 0 ? int.MaxValue : _iterationCount.Value;
        set => _iterationCount = value;
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    [JSInvokable("OnAnimationEnd")]
    public async void AnimationEnd() => await _animationEnd.InvokeAsync(this);

    private EventCallback _animationEnd;
    private int? _iterationCount;
    private bool? _enabled;
    private TimeSpan? _speed;
    private TimeSpan? _delay;

    [CascadingParameter(Name = "OnAnimationEnd")]
    private EventCallback CascadingOnAnimationEnd
    {
        set => _animationEnd = value;
    }

    [Parameter]
    public EventCallback OnAnimationEnd
    {
        set => _animationEnd = value;
    }

    private void ApplyConfiguration()
    {
        var options = OptionsSnapshot.Get(OptionsName);
        if (options == null) return;
        Effect ??= options.Effect;
        if (options.Delay is not null && Delay == BlazorAnimation.Delay.None)
            Delay = options.Delay.Value;
        if (options.Speed is not null && Speed == BlazorAnimation.Speed.Slow)
            Speed = options.Speed.Value;
        if (options.IterationCount is not null && _iterationCount is null)
            IterationCount = options.IterationCount.Value;
        if (options.Enabled is not null && _enabled is null)
            Enabled = options.Enabled.Value;
    }
}

